version: "3.8"

services:
  # MinIO service for object storage
  minio:
    image: minio/minio:latest
    expose:
      - "9000"
      - "9001"
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_KEY:-minioadmin}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # Dragonfly service for caching
  dragonfly:
    image: docker.dragonflydb.io/dragonflydb/dragonfly:latest
    ulimits:
      memlock: -1
    expose:
      - "6379"
    volumes:
      - dragonfly_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-h", "localhost", "ping"]
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 5s
    restart: unless-stopped

  # API service
  api:
    build:
      context: ./packages/api
      dockerfile: Dockerfile
    expose:
      - "3000"
    environment:
      - SERVICE_FQDN_RESIZEIT_3000
      - S3_ENDPOINT=minio
      - S3_PORT=9000
      - S3_USE_SSL=false
      - S3_ACCESS_KEY=${S3_ACCESS_KEY:-minioadmin}
      - S3_SECRET_KEY=${S3_SECRET_KEY:-minioadmin}
      - S3_BUCKET=${MINIO_BUCKET:-images}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-*}
      - DRAGONFLY_HOST=dragonfly
      - DRAGONFLY_PORT=6379
      - DRAGONFLY_ENABLED=true
      - API_KEYS=${API_KEYS:-dev-api-key}
      - ENABLE_API_KEY_AUTH=${ENABLE_API_KEY_AUTH:-false}
    depends_on:
      minio:
        condition: service_healthy
      dragonfly:
        condition: service_healthy
    restart: unless-stopped

# Define named volumes for data persistence
volumes:
  minio_data:
    name: resize-it-minio-data
  dragonfly_data:
    name: resize-it-dragonfly-data
